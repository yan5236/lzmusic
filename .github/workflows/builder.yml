name: Build and Release

on:
  push:
    tags:
      - 'v*'
      - '*.*.*-beta'
  workflow_dispatch:
    inputs:
      create_release:
        description: '是否创建发行版'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      version_tag:
        description: '版本标签 (例如: v1.0.0)'
        required: false
        type: string

env:
  FORCE_COLOR: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            npm_config_cache: ~/.npm
          - os: ubuntu-latest
            platform: linux
            arch: x64
            npm_config_cache: ~/.npm
          - os: macos-latest
            platform: darwin
            arch: x64
            npm_config_cache: ~/.npm

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-js-version: '18'
          cache: 'npm'

      - name: 配置 npm 缓存
        uses: actions/cache@v3
        with:
          path: ${{ matrix.npm_config_cache }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 安装依赖
        run: npm ci

      - name: 构建应用 (Windows)
        if: matrix.platform == 'win32'
        run: |
          npm run build-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建应用 (Linux)
        if: matrix.platform == 'linux'
        run: |
          npx electron-builder --linux --x64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建应用 (macOS)
        if: matrix.platform == 'darwin'
        run: |
          npx electron-builder --mac --x64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传构建产物 (Windows)
        if: matrix.platform == 'win32'
        uses: actions/upload-artifact@v3
        with:
          name: windows-builds
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30

      - name: 上传构建产物 (Linux)
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v3
        with:
          name: linux-builds
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
          retention-days: 30

      - name: 上传构建产物 (macOS)
        if: matrix.platform == 'darwin'
        uses: actions/upload-artifact@v3
        with:
          name: macos-builds
          path: |
            dist/*.dmg
            dist/*.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v3

      - name: 获取版本信息
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version_tag }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: 创建发行版
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: LZ Music ${{ steps.version.outputs.version }}
          body: |
            ## 🎵 LZ Music ${{ steps.version.outputs.version }}
            
            ### 📦 下载
            
            **Windows:**
            - 安装版: `LZ-Music-*-Setup.exe`
            - 便携版: `LZ-Music-*-portable.exe`
            
            **Linux:**
            - AppImage: `LZ-Music-*.AppImage`
            - Debian包: `LZ-Music-*.deb`
            - RPM包: `LZ-Music-*.rpm`
            
            **macOS:**
            - DMG安装包: `LZ-Music-*.dmg`
            
            ### 🔧 安装说明
            
            - **Windows**: 下载对应的exe文件直接运行
            - **Linux**: 下载AppImage文件，添加执行权限后运行，或安装deb/rpm包
            - **macOS**: 下载dmg文件，拖拽到应用程序文件夹
            
            ### 📝 更新日志
            
            请查看提交历史了解详细更改。
            
          draft: false
          prerelease: false
          files: |
            windows-builds/*
            linux-builds/*
            macos-builds/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理旧的构建产物
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            windows-builds
            linux-builds
            macos-builds
